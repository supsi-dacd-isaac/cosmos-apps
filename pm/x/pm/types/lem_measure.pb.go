// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pm/lem_measure.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LemMeasure struct {
	Index     string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Player    string `protobuf:"bytes,2,opt,name=player,proto3" json:"player,omitempty"`
	Signal    string `protobuf:"bytes,3,opt,name=signal,proto3" json:"signal,omitempty"`
	Timestamp int32  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value     string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Mu        string `protobuf:"bytes,6,opt,name=mu,proto3" json:"mu,omitempty"`
	Creator   string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *LemMeasure) Reset()         { *m = LemMeasure{} }
func (m *LemMeasure) String() string { return proto.CompactTextString(m) }
func (*LemMeasure) ProtoMessage()    {}
func (*LemMeasure) Descriptor() ([]byte, []int) {
	return fileDescriptor_123d447f12715182, []int{0}
}
func (m *LemMeasure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LemMeasure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LemMeasure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LemMeasure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LemMeasure.Merge(m, src)
}
func (m *LemMeasure) XXX_Size() int {
	return m.Size()
}
func (m *LemMeasure) XXX_DiscardUnknown() {
	xxx_messageInfo_LemMeasure.DiscardUnknown(m)
}

var xxx_messageInfo_LemMeasure proto.InternalMessageInfo

func (m *LemMeasure) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *LemMeasure) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *LemMeasure) GetSignal() string {
	if m != nil {
		return m.Signal
	}
	return ""
}

func (m *LemMeasure) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LemMeasure) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *LemMeasure) GetMu() string {
	if m != nil {
		return m.Mu
	}
	return ""
}

func (m *LemMeasure) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*LemMeasure)(nil), "supsidacdisaac.pm.pm.LemMeasure")
}

func init() { proto.RegisterFile("pm/lem_measure.proto", fileDescriptor_123d447f12715182) }

var fileDescriptor_123d447f12715182 = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x31, 0x6a, 0xc3, 0x30,
	0x14, 0x86, 0x2d, 0xb7, 0x76, 0x88, 0x86, 0x0e, 0xc2, 0x14, 0x0d, 0x45, 0x84, 0x4e, 0x59, 0x6c,
	0x0f, 0xa5, 0x17, 0xe8, 0xdc, 0x52, 0xc8, 0xd8, 0xa5, 0x28, 0xb6, 0x48, 0x05, 0x7e, 0xd1, 0xc3,
	0x4f, 0x2a, 0xc9, 0x2d, 0x7a, 0x94, 0x1e, 0xa3, 0x63, 0xc6, 0x8e, 0xc5, 0xbe, 0x48, 0xb1, 0xdc,
	0x92, 0x45, 0xf0, 0x7d, 0x08, 0x7e, 0xbe, 0xc7, 0x0b, 0x84, 0xba, 0x33, 0xf0, 0x0a, 0x46, 0x53,
	0xe8, 0x4d, 0x85, 0xbd, 0xf3, 0x4e, 0x14, 0x14, 0x90, 0x6c, 0xab, 0x9b, 0xd6, 0x92, 0xd6, 0x4d,
	0x85, 0x50, 0x21, 0xdc, 0x7e, 0x32, 0xce, 0x1f, 0x0d, 0x3c, 0xcd, 0x5f, 0x45, 0xc1, 0x33, 0xbb,
	0x6f, 0xcd, 0x41, 0xb2, 0x15, 0x5b, 0x2f, 0x37, 0x33, 0x88, 0x6b, 0x9e, 0x63, 0xa7, 0x8f, 0xa6,
	0x97, 0x69, 0xd4, 0x7f, 0x34, 0x79, 0xb2, 0xbb, 0xbd, 0xee, 0xe4, 0xc5, 0xec, 0x67, 0x12, 0x37,
	0x7c, 0xe9, 0x2d, 0x18, 0xf2, 0x1a, 0x50, 0x5e, 0xae, 0xd8, 0x3a, 0xdb, 0x9c, 0xc5, 0xb4, 0xf1,
	0xae, 0xbb, 0x60, 0x64, 0x36, 0x6f, 0x44, 0x10, 0x57, 0x3c, 0x85, 0x20, 0xf3, 0xa8, 0x52, 0x08,
	0x42, 0xf2, 0x45, 0xd3, 0x1b, 0xed, 0x5d, 0x2f, 0x17, 0x51, 0xfe, 0xe3, 0xc3, 0xf3, 0xd7, 0xa0,
	0xd8, 0x69, 0x50, 0xec, 0x67, 0x50, 0xec, 0x63, 0x54, 0xc9, 0x69, 0x54, 0xc9, 0xf7, 0xa8, 0x92,
	0x97, 0xfb, 0x9d, 0xf5, 0x6f, 0x61, 0x5b, 0x35, 0x0e, 0xea, 0x58, 0x5b, 0x4e, 0xb9, 0x65, 0xec,
	0xad, 0x1b, 0x47, 0xe0, 0xa8, 0xd4, 0x88, 0x54, 0x23, 0xd4, 0x87, 0xe9, 0xf1, 0x47, 0x34, 0xb4,
	0xcd, 0xe3, 0x81, 0xee, 0x7e, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xbb, 0x83, 0xb5, 0x38, 0x01,
	0x00, 0x00,
}

func (m *LemMeasure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LemMeasure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LemMeasure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintLemMeasure(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Mu) > 0 {
		i -= len(m.Mu)
		copy(dAtA[i:], m.Mu)
		i = encodeVarintLemMeasure(dAtA, i, uint64(len(m.Mu)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintLemMeasure(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Timestamp != 0 {
		i = encodeVarintLemMeasure(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Signal) > 0 {
		i -= len(m.Signal)
		copy(dAtA[i:], m.Signal)
		i = encodeVarintLemMeasure(dAtA, i, uint64(len(m.Signal)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Player) > 0 {
		i -= len(m.Player)
		copy(dAtA[i:], m.Player)
		i = encodeVarintLemMeasure(dAtA, i, uint64(len(m.Player)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintLemMeasure(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLemMeasure(dAtA []byte, offset int, v uint64) int {
	offset -= sovLemMeasure(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LemMeasure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovLemMeasure(uint64(l))
	}
	l = len(m.Player)
	if l > 0 {
		n += 1 + l + sovLemMeasure(uint64(l))
	}
	l = len(m.Signal)
	if l > 0 {
		n += 1 + l + sovLemMeasure(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovLemMeasure(uint64(m.Timestamp))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovLemMeasure(uint64(l))
	}
	l = len(m.Mu)
	if l > 0 {
		n += 1 + l + sovLemMeasure(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovLemMeasure(uint64(l))
	}
	return n
}

func sovLemMeasure(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLemMeasure(x uint64) (n int) {
	return sovLemMeasure(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LemMeasure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLemMeasure
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LemMeasure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LemMeasure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemMeasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemMeasure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemMeasure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemMeasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemMeasure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemMeasure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemMeasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemMeasure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemMeasure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemMeasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemMeasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemMeasure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemMeasure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemMeasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemMeasure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemMeasure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLemMeasure
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLemMeasure
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLemMeasure
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLemMeasure(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLemMeasure
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLemMeasure(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLemMeasure
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLemMeasure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLemMeasure
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLemMeasure
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLemMeasure
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLemMeasure
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLemMeasure        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLemMeasure          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLemMeasure = fmt.Errorf("proto: unexpected end of group")
)
