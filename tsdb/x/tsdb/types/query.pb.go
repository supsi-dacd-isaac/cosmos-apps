// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsdb/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetTimeseriesRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTimeseriesRequest) Reset()         { *m = QueryGetTimeseriesRequest{} }
func (m *QueryGetTimeseriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeseriesRequest) ProtoMessage()    {}
func (*QueryGetTimeseriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_151c6026b20758ff, []int{0}
}
func (m *QueryGetTimeseriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeseriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeseriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeseriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeseriesRequest.Merge(m, src)
}
func (m *QueryGetTimeseriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeseriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeseriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeseriesRequest proto.InternalMessageInfo

func (m *QueryGetTimeseriesRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTimeseriesResponse struct {
	Timeseries Timeseries `protobuf:"bytes,1,opt,name=Timeseries,proto3" json:"Timeseries"`
}

func (m *QueryGetTimeseriesResponse) Reset()         { *m = QueryGetTimeseriesResponse{} }
func (m *QueryGetTimeseriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTimeseriesResponse) ProtoMessage()    {}
func (*QueryGetTimeseriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_151c6026b20758ff, []int{1}
}
func (m *QueryGetTimeseriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTimeseriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTimeseriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTimeseriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTimeseriesResponse.Merge(m, src)
}
func (m *QueryGetTimeseriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTimeseriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTimeseriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTimeseriesResponse proto.InternalMessageInfo

func (m *QueryGetTimeseriesResponse) GetTimeseries() Timeseries {
	if m != nil {
		return m.Timeseries
	}
	return Timeseries{}
}

type QueryAllTimeseriesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimeseriesRequest) Reset()         { *m = QueryAllTimeseriesRequest{} }
func (m *QueryAllTimeseriesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimeseriesRequest) ProtoMessage()    {}
func (*QueryAllTimeseriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_151c6026b20758ff, []int{2}
}
func (m *QueryAllTimeseriesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimeseriesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimeseriesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimeseriesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimeseriesRequest.Merge(m, src)
}
func (m *QueryAllTimeseriesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimeseriesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimeseriesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimeseriesRequest proto.InternalMessageInfo

func (m *QueryAllTimeseriesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTimeseriesResponse struct {
	Timeseries []Timeseries        `protobuf:"bytes,1,rep,name=Timeseries,proto3" json:"Timeseries"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTimeseriesResponse) Reset()         { *m = QueryAllTimeseriesResponse{} }
func (m *QueryAllTimeseriesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTimeseriesResponse) ProtoMessage()    {}
func (*QueryAllTimeseriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_151c6026b20758ff, []int{3}
}
func (m *QueryAllTimeseriesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTimeseriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTimeseriesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTimeseriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTimeseriesResponse.Merge(m, src)
}
func (m *QueryAllTimeseriesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTimeseriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTimeseriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTimeseriesResponse proto.InternalMessageInfo

func (m *QueryAllTimeseriesResponse) GetTimeseries() []Timeseries {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

func (m *QueryAllTimeseriesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetMeasureRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetMeasureRequest) Reset()         { *m = QueryGetMeasureRequest{} }
func (m *QueryGetMeasureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeasureRequest) ProtoMessage()    {}
func (*QueryGetMeasureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_151c6026b20758ff, []int{4}
}
func (m *QueryGetMeasureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeasureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeasureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeasureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeasureRequest.Merge(m, src)
}
func (m *QueryGetMeasureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeasureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeasureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeasureRequest proto.InternalMessageInfo

func (m *QueryGetMeasureRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetMeasureResponse struct {
	Measure Measure `protobuf:"bytes,1,opt,name=Measure,proto3" json:"Measure"`
}

func (m *QueryGetMeasureResponse) Reset()         { *m = QueryGetMeasureResponse{} }
func (m *QueryGetMeasureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMeasureResponse) ProtoMessage()    {}
func (*QueryGetMeasureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_151c6026b20758ff, []int{5}
}
func (m *QueryGetMeasureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMeasureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMeasureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMeasureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMeasureResponse.Merge(m, src)
}
func (m *QueryGetMeasureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMeasureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMeasureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMeasureResponse proto.InternalMessageInfo

func (m *QueryGetMeasureResponse) GetMeasure() Measure {
	if m != nil {
		return m.Measure
	}
	return Measure{}
}

type QueryAllMeasureRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMeasureRequest) Reset()         { *m = QueryAllMeasureRequest{} }
func (m *QueryAllMeasureRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeasureRequest) ProtoMessage()    {}
func (*QueryAllMeasureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_151c6026b20758ff, []int{6}
}
func (m *QueryAllMeasureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeasureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeasureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeasureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeasureRequest.Merge(m, src)
}
func (m *QueryAllMeasureRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeasureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeasureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeasureRequest proto.InternalMessageInfo

func (m *QueryAllMeasureRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMeasureResponse struct {
	Measure    []Measure           `protobuf:"bytes,1,rep,name=Measure,proto3" json:"Measure"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMeasureResponse) Reset()         { *m = QueryAllMeasureResponse{} }
func (m *QueryAllMeasureResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMeasureResponse) ProtoMessage()    {}
func (*QueryAllMeasureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_151c6026b20758ff, []int{7}
}
func (m *QueryAllMeasureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMeasureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMeasureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMeasureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMeasureResponse.Merge(m, src)
}
func (m *QueryAllMeasureResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMeasureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMeasureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMeasureResponse proto.InternalMessageInfo

func (m *QueryAllMeasureResponse) GetMeasure() []Measure {
	if m != nil {
		return m.Measure
	}
	return nil
}

func (m *QueryAllMeasureResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetTimeseriesRequest)(nil), "supsidacdisaac.tsdb.tsdb.QueryGetTimeseriesRequest")
	proto.RegisterType((*QueryGetTimeseriesResponse)(nil), "supsidacdisaac.tsdb.tsdb.QueryGetTimeseriesResponse")
	proto.RegisterType((*QueryAllTimeseriesRequest)(nil), "supsidacdisaac.tsdb.tsdb.QueryAllTimeseriesRequest")
	proto.RegisterType((*QueryAllTimeseriesResponse)(nil), "supsidacdisaac.tsdb.tsdb.QueryAllTimeseriesResponse")
	proto.RegisterType((*QueryGetMeasureRequest)(nil), "supsidacdisaac.tsdb.tsdb.QueryGetMeasureRequest")
	proto.RegisterType((*QueryGetMeasureResponse)(nil), "supsidacdisaac.tsdb.tsdb.QueryGetMeasureResponse")
	proto.RegisterType((*QueryAllMeasureRequest)(nil), "supsidacdisaac.tsdb.tsdb.QueryAllMeasureRequest")
	proto.RegisterType((*QueryAllMeasureResponse)(nil), "supsidacdisaac.tsdb.tsdb.QueryAllMeasureResponse")
}

func init() { proto.RegisterFile("tsdb/query.proto", fileDescriptor_151c6026b20758ff) }

var fileDescriptor_151c6026b20758ff = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0x69, 0xab, 0x30, 0xa2, 0xc8, 0xe0, 0x8f, 0xba, 0xc8, 0xaa, 0xab, 0xd6, 0xd0,
	0x90, 0x99, 0xa4, 0xf1, 0xe2, 0x31, 0x3d, 0x58, 0x10, 0x04, 0x8d, 0x9e, 0xc4, 0x83, 0xb3, 0xbb,
	0xc3, 0x76, 0x60, 0xb3, 0xb3, 0xcd, 0xcc, 0x8a, 0x45, 0xbc, 0xf8, 0x17, 0x08, 0xde, 0xc5, 0x8b,
	0x08, 0xe2, 0xc5, 0xff, 0xa2, 0xc7, 0x82, 0x17, 0x4f, 0x22, 0x89, 0x7f, 0x88, 0xec, 0xcc, 0xa4,
	0x49, 0x9a, 0xac, 0xdb, 0x94, 0x5c, 0xc2, 0xf2, 0x78, 0xdf, 0xf7, 0x3e, 0xef, 0xfb, 0xf6, 0x6d,
	0xe0, 0x45, 0x25, 0x43, 0x9f, 0xec, 0x65, 0xac, 0xbf, 0x8f, 0xd3, 0xbe, 0x50, 0x02, 0xad, 0xcb,
	0x2c, 0x95, 0x3c, 0xa4, 0x41, 0xc8, 0x25, 0xa5, 0x01, 0xce, 0x13, 0xf4, 0x8f, 0x73, 0x3d, 0x12,
	0x22, 0x8a, 0x19, 0xa1, 0x29, 0x27, 0x34, 0x49, 0x84, 0xa2, 0x8a, 0x8b, 0x44, 0x1a, 0x9d, 0xb3,
	0x19, 0x08, 0xd9, 0x13, 0x92, 0xf8, 0x54, 0x32, 0x53, 0x90, 0xbc, 0x6e, 0xf9, 0x4c, 0xd1, 0x16,
	0x49, 0x69, 0xc4, 0x13, 0x9d, 0x6c, 0x73, 0x2f, 0xeb, 0xae, 0x8a, 0xf7, 0x98, 0x64, 0x7d, 0xce,
	0x46, 0x25, 0x90, 0x0e, 0xf7, 0x18, 0x95, 0x59, 0x9f, 0xd9, 0xd8, 0xa5, 0x48, 0x44, 0x42, 0x3f,
	0x92, 0xfc, 0xc9, 0x44, 0xbd, 0x3a, 0xbc, 0xf6, 0x34, 0x6f, 0xb1, 0xc3, 0xd4, 0xf3, 0xa3, 0x2a,
	0x5d, 0xb6, 0x97, 0x31, 0xa9, 0xd0, 0x05, 0x58, 0xe5, 0xe1, 0x3a, 0xb8, 0x09, 0x6a, 0xab, 0xdd,
	0x2a, 0x0f, 0xbd, 0x5d, 0xe8, 0xcc, 0x4b, 0x96, 0xa9, 0x48, 0x24, 0x43, 0x8f, 0x20, 0x1c, 0x47,
	0xb5, 0xea, 0xdc, 0xd6, 0x1d, 0x5c, 0x64, 0x02, 0x1e, 0xe7, 0x6e, 0xaf, 0x1e, 0xfc, 0xbe, 0x51,
	0xe9, 0x4e, 0xa8, 0xbd, 0xc0, 0x62, 0x75, 0xe2, 0x78, 0x16, 0xeb, 0x21, 0x84, 0x63, 0x23, 0x6c,
	0xa3, 0x0d, 0x6c, 0x5c, 0xc3, 0xb9, 0x6b, 0xd8, 0xac, 0xc1, 0xba, 0x86, 0x9f, 0xd0, 0x88, 0x59,
	0x6d, 0x77, 0x42, 0xe9, 0xfd, 0x00, 0x76, 0x9e, 0x63, 0x5d, 0x0a, 0xe6, 0x59, 0x39, 0xfd, 0x3c,
	0x68, 0x67, 0x0a, 0xb9, 0xaa, 0x91, 0xef, 0x95, 0x22, 0x1b, 0x90, 0x29, 0xe6, 0x1a, 0xbc, 0x32,
	0x5a, 0xc1, 0x63, 0xb3, 0xde, 0xa2, 0x65, 0xbd, 0x84, 0x57, 0x67, 0x32, 0xed, 0x64, 0x1d, 0x78,
	0xd6, 0x86, 0xac, 0x7b, 0xb7, 0x8a, 0xc7, 0xb2, 0x89, 0x76, 0xa6, 0x91, 0xce, 0x7b, 0x65, 0x39,
	0x3a, 0x71, 0x7c, 0x8c, 0x63, 0x59, 0xdb, 0xf9, 0x02, 0xec, 0x00, 0x93, 0x2d, 0xe6, 0x0d, 0xb0,
	0x72, 0x9a, 0x01, 0x96, 0xb6, 0x91, 0xad, 0xaf, 0x6b, 0x70, 0x4d, 0x73, 0xa2, 0xef, 0x60, 0xf2,
	0x8d, 0x41, 0xed, 0x62, 0xa6, 0xc2, 0x93, 0x73, 0xee, 0x2f, 0x26, 0x32, 0x3c, 0x5e, 0xfb, 0xfd,
	0xcf, 0xbf, 0x1f, 0xab, 0x0d, 0x54, 0x27, 0x5a, 0xdd, 0xc8, 0xe5, 0x0d, 0xad, 0x27, 0xe6, 0x03,
	0x31, 0xfd, 0x95, 0x20, 0x6f, 0x79, 0xf8, 0x0e, 0x7d, 0x03, 0xf0, 0xfc, 0xb8, 0x56, 0x27, 0x8e,
	0x4b, 0x89, 0xe7, 0x5d, 0x63, 0x29, 0xf1, 0xdc, 0xe3, 0xf2, 0xb0, 0x26, 0xae, 0xa1, 0x8d, 0x93,
	0x11, 0xa3, 0xcf, 0xe0, 0x68, 0xe5, 0xa8, 0x59, 0xee, 0xd1, 0xf4, 0x3b, 0xe9, 0xb4, 0x16, 0x50,
	0x58, 0xc0, 0xa6, 0x06, 0xdc, 0x44, 0xb5, 0xff, 0x01, 0xda, 0x2f, 0xac, 0xf1, 0xf3, 0x13, 0x80,
	0xd0, 0x56, 0xc9, 0xcd, 0x6c, 0x96, 0xfb, 0xb2, 0x20, 0xe5, 0xec, 0x21, 0x78, 0x75, 0x4d, 0x79,
	0x17, 0xdd, 0x3e, 0x01, 0xe5, 0xf6, 0xb3, 0x83, 0x81, 0x0b, 0x0e, 0x07, 0x2e, 0xf8, 0x33, 0x70,
	0xc1, 0x87, 0xa1, 0x5b, 0x39, 0x1c, 0xba, 0x95, 0x5f, 0x43, 0xb7, 0xf2, 0xe2, 0x41, 0xc4, 0xd5,
	0x6e, 0xe6, 0xe3, 0x40, 0xf4, 0x66, 0x0b, 0x99, 0x9b, 0x68, 0xd0, 0x34, 0x95, 0xa6, 0xde, 0x1b,
	0x5b, 0x7b, 0x3f, 0x65, 0xd2, 0x3f, 0xa3, 0xff, 0x47, 0xda, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x6f, 0xeb, 0xe5, 0x5f, 0x00, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a timeseries by id.
	Timeseries(ctx context.Context, in *QueryGetTimeseriesRequest, opts ...grpc.CallOption) (*QueryGetTimeseriesResponse, error)
	// Queries a list of timeseries items.
	TimeseriesAll(ctx context.Context, in *QueryAllTimeseriesRequest, opts ...grpc.CallOption) (*QueryAllTimeseriesResponse, error)
	// Queries a measure by id.
	Measure(ctx context.Context, in *QueryGetMeasureRequest, opts ...grpc.CallOption) (*QueryGetMeasureResponse, error)
	// Queries a list of measure items.
	MeasureAll(ctx context.Context, in *QueryAllMeasureRequest, opts ...grpc.CallOption) (*QueryAllMeasureResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Timeseries(ctx context.Context, in *QueryGetTimeseriesRequest, opts ...grpc.CallOption) (*QueryGetTimeseriesResponse, error) {
	out := new(QueryGetTimeseriesResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.tsdb.tsdb.Query/Timeseries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeseriesAll(ctx context.Context, in *QueryAllTimeseriesRequest, opts ...grpc.CallOption) (*QueryAllTimeseriesResponse, error) {
	out := new(QueryAllTimeseriesResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.tsdb.tsdb.Query/TimeseriesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Measure(ctx context.Context, in *QueryGetMeasureRequest, opts ...grpc.CallOption) (*QueryGetMeasureResponse, error) {
	out := new(QueryGetMeasureResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.tsdb.tsdb.Query/Measure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MeasureAll(ctx context.Context, in *QueryAllMeasureRequest, opts ...grpc.CallOption) (*QueryAllMeasureResponse, error) {
	out := new(QueryAllMeasureResponse)
	err := c.cc.Invoke(ctx, "/supsidacdisaac.tsdb.tsdb.Query/MeasureAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a timeseries by id.
	Timeseries(context.Context, *QueryGetTimeseriesRequest) (*QueryGetTimeseriesResponse, error)
	// Queries a list of timeseries items.
	TimeseriesAll(context.Context, *QueryAllTimeseriesRequest) (*QueryAllTimeseriesResponse, error)
	// Queries a measure by id.
	Measure(context.Context, *QueryGetMeasureRequest) (*QueryGetMeasureResponse, error)
	// Queries a list of measure items.
	MeasureAll(context.Context, *QueryAllMeasureRequest) (*QueryAllMeasureResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Timeseries(ctx context.Context, req *QueryGetTimeseriesRequest) (*QueryGetTimeseriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeseries not implemented")
}
func (*UnimplementedQueryServer) TimeseriesAll(ctx context.Context, req *QueryAllTimeseriesRequest) (*QueryAllTimeseriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeseriesAll not implemented")
}
func (*UnimplementedQueryServer) Measure(ctx context.Context, req *QueryGetMeasureRequest) (*QueryGetMeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Measure not implemented")
}
func (*UnimplementedQueryServer) MeasureAll(ctx context.Context, req *QueryAllMeasureRequest) (*QueryAllMeasureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MeasureAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Timeseries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimeseriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Timeseries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.tsdb.tsdb.Query/Timeseries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Timeseries(ctx, req.(*QueryGetTimeseriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeseriesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimeseriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeseriesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.tsdb.tsdb.Query/TimeseriesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeseriesAll(ctx, req.(*QueryAllTimeseriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Measure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Measure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.tsdb.tsdb.Query/Measure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Measure(ctx, req.(*QueryGetMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MeasureAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMeasureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MeasureAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supsidacdisaac.tsdb.tsdb.Query/MeasureAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MeasureAll(ctx, req.(*QueryAllMeasureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supsidacdisaac.tsdb.tsdb.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Timeseries",
			Handler:    _Query_Timeseries_Handler,
		},
		{
			MethodName: "TimeseriesAll",
			Handler:    _Query_TimeseriesAll_Handler,
		},
		{
			MethodName: "Measure",
			Handler:    _Query_Measure_Handler,
		},
		{
			MethodName: "MeasureAll",
			Handler:    _Query_MeasureAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tsdb/query.proto",
}

func (m *QueryGetTimeseriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeseriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeseriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTimeseriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTimeseriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTimeseriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Timeseries.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTimeseriesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimeseriesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimeseriesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTimeseriesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTimeseriesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTimeseriesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Timeseries) > 0 {
		for iNdEx := len(m.Timeseries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Timeseries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMeasureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeasureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeasureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMeasureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMeasureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMeasureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Measure.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllMeasureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeasureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeasureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMeasureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMeasureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMeasureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Measure) > 0 {
		for iNdEx := len(m.Measure) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Measure[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetTimeseriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTimeseriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Timeseries.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTimeseriesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTimeseriesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Timeseries) > 0 {
		for _, e := range m.Timeseries {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMeasureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetMeasureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Measure.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllMeasureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMeasureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Measure) > 0 {
		for _, e := range m.Measure {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetTimeseriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeseriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeseriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTimeseriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTimeseriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTimeseriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeseries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Timeseries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimeseriesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimeseriesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimeseriesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTimeseriesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTimeseriesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTimeseriesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeseries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeseries = append(m.Timeseries, Timeseries{})
			if err := m.Timeseries[len(m.Timeseries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeasureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeasureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeasureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMeasureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMeasureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMeasureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Measure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Measure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeasureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeasureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeasureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMeasureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMeasureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMeasureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Measure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Measure = append(m.Measure, Measure{})
			if err := m.Measure[len(m.Measure)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
