// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tsdb/timeseries.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Timeseries struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Location string `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Signal   string `protobuf:"bytes,3,opt,name=signal,proto3" json:"signal,omitempty"`
	Creator  string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *Timeseries) Reset()         { *m = Timeseries{} }
func (m *Timeseries) String() string { return proto.CompactTextString(m) }
func (*Timeseries) ProtoMessage()    {}
func (*Timeseries) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6b71e970e38d122, []int{0}
}
func (m *Timeseries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timeseries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timeseries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timeseries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timeseries.Merge(m, src)
}
func (m *Timeseries) XXX_Size() int {
	return m.Size()
}
func (m *Timeseries) XXX_DiscardUnknown() {
	xxx_messageInfo_Timeseries.DiscardUnknown(m)
}

var xxx_messageInfo_Timeseries proto.InternalMessageInfo

func (m *Timeseries) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Timeseries) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Timeseries) GetSignal() string {
	if m != nil {
		return m.Signal
	}
	return ""
}

func (m *Timeseries) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func init() {
	proto.RegisterType((*Timeseries)(nil), "supsidacdisaac.tsdb.tsdb.Timeseries")
}

func init() { proto.RegisterFile("tsdb/timeseries.proto", fileDescriptor_b6b71e970e38d122) }

var fileDescriptor_b6b71e970e38d122 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe3, 0x50, 0x15, 0xf0, 0xc0, 0x60, 0x01, 0xb2, 0x3a, 0x58, 0x15, 0x53, 0x97, 0xc4,
	0x03, 0x13, 0x2b, 0x8f, 0x50, 0x98, 0xd8, 0x1c, 0xdb, 0x0a, 0x87, 0x9a, 0x9e, 0x95, 0x73, 0x25,
	0x78, 0x0b, 0x1e, 0x8b, 0xb1, 0x23, 0x23, 0x4a, 0x5e, 0x04, 0xe5, 0x0a, 0x59, 0xee, 0xee, 0xd7,
	0xff, 0xe9, 0xa4, 0x4f, 0xde, 0x64, 0x0a, 0x8d, 0xcd, 0xd0, 0x45, 0x8a, 0x3d, 0x44, 0xaa, 0x53,
	0x8f, 0x19, 0x95, 0xa6, 0x43, 0x22, 0x08, 0xce, 0x07, 0x20, 0xe7, 0x7c, 0x3d, 0x51, 0x3c, 0x56,
	0xd7, 0x2d, 0xb6, 0xc8, 0x90, 0x9d, 0xae, 0x13, 0x7f, 0xf7, 0x26, 0xe5, 0xf3, 0xfc, 0x43, 0x5d,
	0xc9, 0x12, 0x82, 0x16, 0x6b, 0xb1, 0x59, 0x6c, 0x4b, 0x08, 0x6a, 0x25, 0x2f, 0x76, 0xe8, 0x5d,
	0x06, 0xdc, 0xeb, 0x72, 0x2d, 0x36, 0x97, 0xdb, 0x39, 0xab, 0x5b, 0xb9, 0x24, 0x68, 0xf7, 0x6e,
	0xa7, 0xcf, 0xb8, 0xf9, 0x4b, 0x4a, 0xcb, 0x73, 0xdf, 0x47, 0x97, 0xb1, 0xd7, 0x0b, 0x2e, 0xfe,
	0xe3, 0xe3, 0xd3, 0xd7, 0x60, 0xc4, 0x71, 0x30, 0xe2, 0x67, 0x30, 0xe2, 0x73, 0x34, 0xc5, 0x71,
	0x34, 0xc5, 0xf7, 0x68, 0x8a, 0x97, 0x87, 0x16, 0xf2, 0xeb, 0xa1, 0xa9, 0x3d, 0x76, 0x96, 0x05,
	0xaa, 0xc9, 0xa0, 0x62, 0x05, 0xeb, 0x91, 0x3a, 0xa4, 0xca, 0xa5, 0x44, 0x96, 0xa5, 0xdf, 0x4f,
	0x2b, 0x7f, 0xa4, 0x48, 0xcd, 0x92, 0x3d, 0xee, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x82, 0x14,
	0xed, 0xf3, 0x10, 0x01, 0x00, 0x00,
}

func (m *Timeseries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timeseries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timeseries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTimeseries(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signal) > 0 {
		i -= len(m.Signal)
		copy(dAtA[i:], m.Signal)
		i = encodeVarintTimeseries(dAtA, i, uint64(len(m.Signal)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintTimeseries(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTimeseries(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimeseries(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimeseries(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Timeseries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTimeseries(uint64(m.Id))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovTimeseries(uint64(l))
	}
	l = len(m.Signal)
	if l > 0 {
		n += 1 + l + sovTimeseries(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTimeseries(uint64(l))
	}
	return n
}

func sovTimeseries(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimeseries(x uint64) (n int) {
	return sovTimeseries(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Timeseries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimeseries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timeseries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timeseries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeseries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeseries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimeseries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimeseries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeseries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimeseries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimeseries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimeseries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimeseries
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimeseries
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTimeseries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimeseries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimeseries(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimeseries
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimeseries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimeseries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimeseries
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimeseries
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimeseries
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimeseries        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimeseries          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimeseries = fmt.Errorf("proto: unexpected end of group")
)
